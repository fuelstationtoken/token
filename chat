using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.Net;
using Open.Nat;

namespace NetWorkV2
{
    class Program
    {
        public static Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

        public static Socket clientSocket;

        public static Thread client = new Thread(Client);
        public static Thread server = new Thread(Server);
        public static Thread send = new Thread(SendMessage);
        public static Thread accept = new Thread(AcceptMessage);

        static void Main(string[] args)
        {
            
            Console.WriteLine("Вы сервер или клиент?");
            Console.WriteLine("1. Сервер");
            Console.WriteLine("2. Клиент");

            ConsoleKeyInfo cki;

            do
            {
                cki = Console.ReadKey();
                //Console.WriteLine(cki.Key + " клавиша была нажата");
                if (cki.Key == ConsoleKey.D1)
                {
                    Console.Clear();
                    Console.WriteLine("Вы сервер");
                    server.Start();
                    break;
                }

                if (cki.Key == ConsoleKey.D2)
                {
                    Console.Clear();
                    Console.WriteLine("Вы клиент");
                    client.Start();
                    break;

                }
               

            }
            while (true); // по нажатию на Escape завершаем цикл

            //Console.ReadKey();
            OpenPort().Wait();

        }

        private static async Task OpenPort()
        {
            try
            {
                var nat = new NatDiscoverer();
                var cts = new CancellationTokenSource(5000);
                var device = await nat.DiscoverDeviceAsync(PortMapper.Upnp, cts);
                var ip = await device.GetExternalIPAsync();

                await device.CreatePortMapAsync(new Mapping(Protocol.Tcp, 32679, 32679, 0, "port 32679"));
                Console.WriteLine("Порт успешно переброшен.");
            }
            catch(Exception ex)
            {
                Console.WriteLine("Ошибка: " + ex.Message);
                Console.ReadKey();
            }
        }

        static void Client()
        {
            Thread.Sleep(2000);
            Console.WriteLine("Введите IP для подключения: ");
            string ip = Console.ReadLine();
            try
            {
                socket.Connect(ip, 32679);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка: " + ex.Message);
                return;
            }

            Console.WriteLine("Подключение прошло успешно");
            Console.WriteLine("Нажмите любую клавишу чтобы продолжить.");
            Console.ReadKey();
            Console.Clear();
            Console.WriteLine("Введите сообщение.");

            accept.Start();

            while (true)
            {
                try
                {
                    string message = Console.ReadLine();
                    byte[] buffer = Encoding.Unicode.GetBytes(message);
                    socket.Send(buffer);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Ошибка: " + ex.Message);
                    Console.ReadKey();
                    socket.Close();
                    Environment.Exit(0);
                }
            }
        }

        static void Server()
        {
            Thread.Sleep(2000);
            try
            {
                socket.Bind(new IPEndPoint(IPAddress.Any, 32679));
                socket.Listen(5);
                //Socket client = socket.Accept();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ошибка: " + ex.Message);
                Console.ReadKey();
                socket.Close();
                Environment.Exit(0);
            }

            clientSocket = socket.Accept();
            Console.WriteLine("Новое подключение!");
            send.Start();
            byte[] buffer = new byte[1024];

            while (true)
            {
                try
                {
                    clientSocket.Receive(buffer);
                    Console.WriteLine(DateTime.Now.ToString("HH:mm:ss") + " Клиент: " + Encoding.Unicode.GetString(buffer));
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Ошибка: " + ex.Message);
                    Console.ReadKey();
                    clientSocket.Close();
                    socket.Close();
                    Environment.Exit(0);
                }

                Array.Clear(buffer, 0, 1024);
                //buffer.ToArray();

            }
        }

        static void SendMessage()
        {
            Console.WriteLine(DateTime.Now.ToString("HH:mm:ss") + " Введите сообщение.");
            while (true)
            {
                try
                {
                    string message = Console.ReadLine();
                    byte[] buffer = Encoding.Unicode.GetBytes(message);
                    clientSocket.Send(buffer);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Ошибка: " + ex.Message);
                    Console.ReadKey();
                    clientSocket.Close();
                    Environment.Exit(0);
                }
            }
        }

        static void AcceptMessage()
        {
            byte[] buffer = new byte[1024];

            while (true)
            {
                try
                {
                    socket.Receive(buffer);
                    Console.WriteLine(DateTime.Now.ToString("HH:mm:ss") + " Сервер: " + Encoding.Unicode.GetString(buffer));
                }
                catch (Exception ex)
                {
                    Console.WriteLine(DateTime.Now.ToString("HH:mm:ss") + " Ошибка: " + ex.Message);
                    Console.ReadKey();
                    socket.Close();
                    socket.Close();
                    Environment.Exit(0);
                }

                Array.Clear(buffer, 0, 1024);
                //buffer.ToArray();

            }
        }

    }
}
